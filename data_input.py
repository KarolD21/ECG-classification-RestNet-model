import pandas as pd
import numpy as np
import wfdb
import ast

# Read signal data from database location
df_ptbxl_database = pd.read_csv("path to signal data in .csv file")
df_ptbxl_database.set_index('ecg_id', inplace=True)

# Deletes first set of currently useless columns
df_ptbxl = df_ptbxl_database.copy()
df_ptbxl.drop(['nurse', 'site', 'patient_id', 'device', 
                      'recording_date', 'validated_by', 'second_opinion',
                      'initial_autogenerated_report', 'validated_by_human'], axis=1, inplace=True)

# Looking for holes in data
# df_ptbxl.isnull().sum().sum()

# Deletes second set of currently useless columns
df_ptbxl_net = df_ptbxl.copy()
df_ptbxl_net.drop(df_ptbxl_net.columns[[2,3,4,6,7,8,9,10,11,12,13,14]], axis=1, inplace=True)

# Read signal labels from database loction
df_ptbxl_statements = pd.read_csv("patch to signal label data in .csv file")
df_ptbxl_statements.rename(columns={'Unnamed: 0':'malfunction_name'}, inplace=True)

# Load and convert annotation data
df_ptbxl_net.scp_codes = [ast.literal_eval(f) for f in df_ptbxl_net.scp_codes]

# **Used to safely evaluate a string containing a Python literal (e.g. string, number, tuple, 
#   list, dict) an convert it into the corresponding Python object. Takes each
#   element f of the scp_codes column, applies ast.literal_eval(f) to convert it from a string to a
#   dictionary, and returns the dictionary.

# Deletes records with age higher than 89 writed in a df as 300
def delete_elders(df):
    big_years = []

    for f in df.age:
        if f > 89:
            choose = df[df['age'] == f].index
            big_years = choose.to_list()
    return big_years

df_ptbxl_net.drop(index=delete_elders(df_ptbxl_net), inplace=True)

# Clustering age labels to generalize classes
def clustering_age(df):
    df.age = df.age.astype(int)

    df.loc[df.age <= 9, 'age'] = 1
    df.loc[(df.age > 9) & (df.age <= 19), 'age'] = 2
    df.loc[(df.age > 19) & (df.age <= 29), 'age'] = 3
    df.loc[(df.age > 29) & (df.age <= 39), 'age'] = 4
    df.loc[(df.age > 39) & (df.age <= 49), 'age'] = 5
    df.loc[(df.age > 49) & (df.age <= 59), 'age'] = 6
    df.loc[(df.age > 59) & (df.age <= 69), 'age'] = 7
    df.loc[(df.age > 69) & (df.age <= 79), 'age'] = 8
    df.loc[df.age > 79, 'age'] = 9

    return df

df_ptbxl_net = clustering_age(df_ptbxl_net)

# Sorting signals by 'strat_fold' col
df_ptbxl_net = df_ptbxl_net.sort_values(by='strat_fold', ignore_index='True')

# Filling extra row with nessesary data of additional class
df_ptbxl_statements.loc[71] = np.nan
df_ptbxl_statements.loc[71, 'description'] = 'unknown malfunction'
df_ptbxl_statements.loc[71, 'malfunction_name'] = 'NN'